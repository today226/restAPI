SpringSecurity
스프링에서는 인증 및 권한 부여를 통해 리소스의 사용을 쉽게 컨트롤할 수 있는 SpringSecurity framework를 제공하고 있다.
Spring boot기반의 프로젝트에 SpringSecurity를 적용하면 보안 관련 처리를 자체적으로 구현할 필요 없이 쉽게 필요한 기능을 구현할 수 있다.
간략하게 아래의 그림처럼 SpringSecurity는 Spring의 DispatcherServlet 앞단에 Filter를 등록시켜 요청을 가로챈다.
클라이언트에게 리소스 접근 권한이 없을 경우엔 인증(ex:로그인) 화면으로 자동으로 리다이렉트 한다.

SpringSecurity Filter
SpringSecurity는 기능별 필터의 집합으로 되어있고 필터의 처리 순서는 아래와 같다.
종류가 매우 많지만 여기서 중요한 것은 필터의 처리 순서.
클라이언트가 리소스를 요청할 때 접근 권한이 없는 경우 기본적으로 로그인 폼으로 보내게 되는데 그 역할을 하는 필터는 UsernamePasswordAuthenticationFilter이다.
Rest Api에서는 로그인 폼이 따로 없으므로 인증 권한이 없다는 오류 Json을 내려줘야 하므로 UsernamePasswordAuthenticationFilter 전에 관련 처리를 넣어야 함을 알 수 있다.

*필터 종류
ChannelProcessingFilter
SecurityContextPersistenceFilter
ConcurrentSessionFilter
HeaderWriterFilter
CsrfFilter
LogoutFilter
X509AuthenticationFilter
AbstractPreAuthenticatedProcessingFilter
CasAuthenticationFilter
UsernamePasswordAuthenticationFilter
BasicAuthenticationFilter
SecurityContextHolderAwareRequestFilter
JaasApiIntegrationFilter
RememberMeAuthenticationFilter
AnonymousAuthenticationFilter
SessionManagementFilter
ExceptionTranslationFilter
FilterSecurityInterceptor
SwitchUserFilter

아무나 접근 가능한 리소스는 permitAll()로 세팅하고 나머지 리소스는 다음과 같이 ‘ROLE_USER’ 권한이 필요함으로 명시
anyRequest().hasRole(“USER”) 또는 anyRequest().authenticated()는 동일한 동작을 한다.
위에서 설명했듯이 해당 filter는 UsernamePasswordAuthenticationFilter 앞에 설정해야 한다.
SpringSecurity 적용 후에는 모든 리소스에 대한 접근이 제한되므로. Swagger 페이지에 대해서는 예외를 적용해야 페이지에 접근할 수 있습니다. 리소스 접근 제한 표현식은 여러 가지가 있으며 다음과 같다.

hasIpAddress(ip) – 접근자의 IP주소가 매칭 하는지 확인.
hasRole(role) – 역할이 부여된 권한(Granted Authority)과 일치하는지 확인.
hasAnyRole(role) – 부여된 역할 중 일치하는 항목이 있는지 확인.
ex) access = “hasAnyRole(‘ROLE_USER’,’ROLE_ADMIN’)”
permitAll – 모든 접근자를 항상 승인
denyAll – 모든 사용자의 접근을 거부
anonymous – 사용자가 익명 사용자인지 확인
authenticated – 인증된 사용자인지 확인
rememberMe – 사용자가 remember me를 사용해 인증했는지 확인
fullyAuthenticated – 사용자가 모든 크리덴셜을 갖춘 상태에서 인증했는지 확인

User Entity 수정
SpringSecurity의 보안을 적용하기 위해 User entity에 UserDetails Class를 상속받아 추가 정보를 재정의
roles는 회원이 가지고 있는 권한 정보이고, 가입했을 때는 기본 “ROLE_USER”가 세팅.
권한은 회원당 여러 개가 세팅될 수 있으므로 Collection으로 선언.
getUsername은 security에서 사용하는 회원 구분 id입니다. 여기선 uid로 변경.
다음 값들은 Security에서 사용하는 회원 상태 값입니다. 여기선 모두 사용 안 하므로 true로 설정
Json결과로 출력 안 할 데이터는 @JsonProperty(access = JsonProperty.Access.WRITE_ONLY) 어노테이션을 선언

isAccountNonExpired – 계정이 만료가 안되었는지
isAccountNonLocked – 계정이 잠기지 않았는지
isCredentialsNonExpired – 계정 패스워드가 만료 안됬는지
isEnabled – 계정이 사용 가능한지




API 인증 및 권한 부여, 제한된 리소스의 요청
인증을 위해 가입(Signup)및 로그인(Signin) api를 구현.
가입 시 제한된 리소스에 접근할 수 있는 ROLE_USER 권한을 회원에게 부여.
SpringSecurity 설정에는 접근 제한이 필요한 리소스에 대해서 ROLE_USER 권한을 가져야 접근 가능하도록 세팅.
권한을 가진 회원이 로그인 성공 시엔 리소스에 접근할 수 있는 Jwt 보안 토큰을 발급.
Jwt 보안 토큰으로 회원은 권한이 필요한 api 리소스를 요청하여 사용
JWT 란?
JSON Web Token (JWT)은 JSON 객체로서 당사자간에 안전하게 정보를 전송할 수 있는 작고 독립적인 방법을 정의하는 공개 표준 (RFC 7519)입니다. 자세한 내용은 아래 링크에서 확인할 수 있다.
https://jwt.io/introduction/
Jwt는 JSON 객체를 암호화하여 만든 String값으로 기본적으로 암호화되어있어 변조하기가 어려운 정보.
또한 다른 토큰과 달리 토큰 자체에 데이터를 가지고 있다.
api 서버에서는 로그인이 완료된 클라이언트에게 회원을 구분할 수 있는 값을 넣은 Jwt 토큰을 생성하여 발급하고, 클라이언트는 이 Jwt 토큰을 이용하여 권한이 필요한 리소스를 서버에 요청하는 데 사용할 수 있다.
api서버는 클라이언트에게서 전달받은 Jwt 토큰이 유효한지 확인하고 담겨있는 회원 정보를 확인하여 제한된 리소스를 제공하는데 이용할 수 있다.



